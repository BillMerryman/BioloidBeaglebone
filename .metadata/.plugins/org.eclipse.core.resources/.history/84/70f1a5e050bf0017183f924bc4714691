/*
 * load.c
 *
 *  Created on: Sep 8, 2015
 *      Author: Bill
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <err.h>
#include <errno.h>

#include "prussdrv.h"
#include "pruss_intc_mapping.h"

#include "image.h"
#include "pru.h"

void *pruExternalMemoryVirtual;
void *pruExternalMemoryPhysical;
PRU_INTEROP_DATA *PRUInteropData;
void *pru0DataMemory;
void *pru1DataMemory;

void *getExternalMemoryVirtualPRU()
{
	return pruExternalMemoryVirtual;
}

void initializePRU()
{

	int result;

	tpruss_intc_initdata pruss_intc_initdata = PRUSS_INTC_INITDATA;

	prussdrv_init();

	/* Open PRU Interrupt */
	result = prussdrv_open(PRU_EVTOUT_0);
	if (result) errx(EXIT_FAILURE, "prussdrv_open open failed\n");

	/* Get the interrupt initialized */
	prussdrv_pruintc_init(&pruss_intc_initdata);

	/* Not sure this is necessary */
	prussdrv_enable_ocp_master_port();

	/* Disable PRUs */
	prussdrv_pru_disable(0);
	prussdrv_pru_disable(1);

	/* assign addresses of PRU data memories to pointers */
	prussdrv_map_prumem(PRUSS0_PRU0_DATARAM, &pru0DataMemory);
	prussdrv_map_prumem(PRUSS0_PRU1_DATARAM, &pru1DataMemory);

	/* Map external memory */
	prussdrv_map_extmem(&pruExternalMemoryVirtual);

	/* Get a reference to the physical address of external memory the PRU driver has allocated */
	pruExternalMemoryPhysical = (void *)prussdrv_get_phys_addr(pruExternalMemoryVirtual);
	PRUInteropData = (PRU_INTEROP_DATA *)pruExternalMemoryPhysical;

}

void configurePRU(uint8_t pruNumber, const char *pruProgramTextFile, const char *pruProgramDataFile, uint32_t PRUInteropDataPointerOffset)
{

	int result;

	result = prussdrv_load_datafile(pruNumber, pruProgramDataFile);

	((uint8_t *)pru1DataMemory)[PRUInteropDataPointerOffset + 0] = ((unsigned int)pruExternalMemoryPhysical >> 0) & 0xff;
	((uint8_t *)pru1DataMemory)[PRUInteropDataPointerOffset + 1] = ((unsigned int)pruExternalMemoryPhysical >> 8) & 0xff;
	((uint8_t *)pru1DataMemory)[PRUInteropDataPointerOffset + 2] = ((unsigned int)pruExternalMemoryPhysical >> 16) & 0xff;
	((uint8_t *)pru1DataMemory)[PRUInteropDataPointerOffset + 3] = ((unsigned int)pruExternalMemoryPhysical >> 24) & 0xff;

	prussdrv_load_program(pruNumber, pruProgramTextFile);

}

void startPRU(uint8_t pruNumber)
{

	prussdrv_pru_enable(pruNumber);

}

void stopPRU(uint8_t pruNumber)
{

	prussdrv_pru_disable(pruNumber);

}

void configurePRU_0(const char *pruProgramTextFile, const char *pruProgramDataFile)
{

	int result;

	result = prussdrv_load_datafile(0, pruProgramDataFile);

	/* write the physical address of PRU external memory to the address of the pointer in PRU memory that the PRU will use to access it */

//	((uint8_t *)pru0DataMemory)[PRU_INTEROP_0_DATA_POINTER_OFFSET + 0] = ((unsigned int)pruExternalMemoryPhysical >> 0) & 0xff;
//	((uint8_t *)pru0DataMemory)[PRU_INTEROP_0_DATA_POINTER_OFFSET + 1] = ((unsigned int)pruExternalMemoryPhysical >> 8) & 0xff;
//	((uint8_t *)pru0DataMemory)[PRU_INTEROP_0_DATA_POINTER_OFFSET + 2] = ((unsigned int)pruExternalMemoryPhysical >> 16) & 0xff;
//	((uint8_t *)pru0DataMemory)[PRU_INTEROP_0_DATA_POINTER_OFFSET + 3] = ((unsigned int)pruExternalMemoryPhysical >> 24) & 0xff;

	prussdrv_load_program(0, pruProgramTextFile);

}

void startPRU_0(){

	startPRU(0);

}

void stopPRU_0()
{

	stopPRU(0);

}

void configurePRU_1(const char *pruProgramTextFile, const char *pruProgramDataFile)
{

	/*
	 *
	 * Rewrite the configurePRU functions to be one configure function, one start function,
	 * and one stop function, that takes the PRU number as an argument, and also takes an
	 * optional DATA_POINTER_OFFSET supplied to the function. If supplied, it is used to
	 * write back to PRU data memory. Otherwise it is skipped...
	 *
	 */

	int result;

	result = prussdrv_load_datafile(1, pruProgramDataFile);

	((uint8_t *)(&(PRUInteropData->PRUInterop1Data.imageData)))[PRU_INTEROP_1_DATA_POINTER_OFFSET + 0] = ((unsigned int)pruExternalMemoryPhysical >> 0) & 0xff;
	((uint8_t *)(&(PRUInteropData->PRUInterop1Data.imageData)))[PRU_INTEROP_1_DATA_POINTER_OFFSET + 1] = ((unsigned int)pruExternalMemoryPhysical >> 8) & 0xff;
	((uint8_t *)(&(PRUInteropData->PRUInterop1Data.imageData)))[PRU_INTEROP_1_DATA_POINTER_OFFSET + 2] = ((unsigned int)pruExternalMemoryPhysical >> 16) & 0xff;
	((uint8_t *)(&(PRUInteropData->PRUInterop1Data.imageData)))[PRU_INTEROP_1_DATA_POINTER_OFFSET + 3] = ((unsigned int)pruExternalMemoryPhysical >> 24) & 0xff;

	prussdrv_load_program(1, pruProgramTextFile);

}

void startPRU_1(){

	startPRU(1);

}

void stopPRU_1()
{

	stopPRU(1);

}
